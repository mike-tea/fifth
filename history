23.02.15
分支循环
实现了pascal风格的if，while，repeat。
break，continue 待实现
这些实现用不着语法分析，只要简单的词法分析，翻译成jump指令而已。
因此，还是汇编语言，并不是高级语言。只是近似高级语言。


23.02.16
多返回值函数。
c语言只有一个返回值，不方便。
因此，设计了以下的多返回值函数，已经实现。
比较精巧，算是解决了一个重要问题。
::f(a1 a2 -> r1 r2 r3)

容易扩展成可变参数函数，比如
::print(... n a1 a2 -> r1 r2)
其中，n给出可变参数的个数。待实现。


23.02.17
给函数增加了信息头，其中有版本号，区分新旧函数


23.02.18
用::定义新函数 :: f ( a -- r | x y z) 
在程序中，特殊指令（如::)可以取下一个word，只要换行算用户错误即可（原程序结构中，这块很难处理）。


23.02.19
加入字符串，暂时先用C风格，将来再改句柄方式。
用NaN区分类型， 打印指令(用?)， 待实现type指令
已经实现 $+, $len, $sub,	待实现 $left, $right, $mid
代码只用了200行左右


23.02.22
数组array。	实现指令	[]len, 	[],	[]=,		待实现[]+
	{ 0 1 2 "a" 4 }
	a []len				  	--	len(a)
	2 a []				  	--	a[2]
	888 2 a []=				--	a[2]=888
	12 a []+				--	把12 添加到 a 的最后

记录struct	实现指令 :Struct，	new，	#get,	#set
	{ "Book" "name" "price" } :Struct
	--		:Struct Book { name price }
	new Book 
	"abc" 0 s #set				-- "abc" -> Book.name 
	5     1 s #set				-- 5 -> Book.price
	0 s #get				-- Book.name
	1 s #get				-- Book.price
	
函数对象.	实现指令：	#getfn,	#call 
	"fn-name" #getfn
   	a1 a2 fn #call 
	
23.12.10
最高级别的重大改变，把目前的后缀表达式，改为前缀表达式（类似lisp）。
可以极大地提高可读性（也提高准确性），从本质上是一样的。


==== todo ====
关联数组 table
	{  	name => "cc"
		x => 10
	   	y => 20
	   	t => { 1 2 3 }
	}

…
